openapi: 3.0.0
info:
  title: Nexus Backend
  version: 1.0.0
  license:
    name: MIT
  description: Backend API for NPO student projects platform
  contact:
    name: NEXUS UW
    email: nexus@uw.edu
servers:
  - url: 'http://localhost:3000/v1'
paths:
  /verify:
    get:
      summary: Verify user auth status
      responses:
        '200':
          description: OK
          headers:
            token:
              schema:
                type: string
              description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
      operationId: verifyAuth
      description: Verify user auth status
      tags:
        - auth
  /auth/register:
    post:
      summary: Register locally
      responses:
        '200':
          description: OK
          headers:
            token:
              schema:
                type: string
              description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
      description: Register user locally
      operationId: registerLocal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User
      tags:
        - auth
  /auth/login:
    post:
      summary: Login locally
      responses:
        '200':
          description: OK
          headers:
            token:
              schema:
                type: string
              description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
      description: Login user
      operationId: loginLocal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User
      tags:
        - auth
  /auth/student/facebook:
    get:
      summary: Login Facebook
      tags:
        - auth
      responses:
        '200':
          description: OK
      description: Login Facebook
      operationId: loginFacebook

  /students:
    post:
      summary: Create student account
      tags:
        - students
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  studentId:
                    type: string
      description: Create student account
      operationId: createStudent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                # $ref: '#/components/schemas/StudentProfile'
        description: Student
    patch:
      summary: Update student profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
      operationId: updateStudent
      description: Update student profile
      tags:
        - students
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                profile:
                  type: object
                  properties:
                    dob:
                      type: string
                      format: date
                    school:
                      type: string
                    standing:
                      type: string
                    major1:
                      type: string
                    major2:
                      type: string
                    location:
                      $ref: '#/components/schemas/Location'
                skills:
                  type: array
                  items:
                    type: string
              # $ref: '#/components/schemas/Student'
        description: Student
    delete:
      summary: Delete student account
      operationId: deleteStudent
      description: Delete student account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
      tags:
        - students
  
  '/students/{username}':
    get:
      summary: Get student profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
      operationId: getStudent
      description: Get student profile
      tags:
        - students
    parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
  
  /projects:
    post:
      summary: Create project
      tags:
        - projects
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectId:
                    type: string
      operationId: createProject
      description: Create project
      requestBody:
        description: Project
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                # $ref: '#/components/schemas/Project'

  /projects/owned:
    get:
      summary: Get projects owned
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDetails'
      operationId: getProjectsOwned
      description: Get projects owned
      tags:
        - projects
  
  '/projects/{projectId}':
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get project
      tags:
        - projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      operationId: getProject
      description: Get project
    patch:
      summary: Update project details
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
      operationId: updateProject
      description: Update project details
      tags:
        - projects
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                details:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    startDate:
                      type: string
                      format: date
                    endDate:
                      type: string
                      format: date
                    status:
                      type: string
                fields:
                  type: array
                  items:
                    type: string
                skills:
                  type: array
                  items:
                    type: string
                locations:
                  type: array
                  items:
                    $ref: '#/components/schemas/Location'
        description: Project
    delete:
      summary: Delete project
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
      operationId: deleteProject
      description: Delete project
      tags:
        - projects

  '/projects/{projectId}/contracts':
    get:
      summary: Get project contracts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    contractId:
                      type: string
                    startDate:
                      type: string
                      format: date
                    endDate:
                      type: string
                      format: date
                    status:
                      type: string
                    student:
                      type: object
                      properties:
                        firstName:
                          type: string
                        lastName:
                          type: string
                        user:
                          type: object
                          properties:
                            username:
                              type: string
      operationId: getProjectContracts
      description: Get project contracts
      tags:
        - projects
        - contracts
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
  
  /projects/search:
    post:
      summary: Search project
      tags:
        - projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectId:
                    type: string
              examples: {}
      operationId: searchProject
      description: Search project
      requestBody:
        description: Project Filter
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/Project'
                offset:
                  type: integer
                count:
                  type: integer
  
  /contracts:
    get:
      summary: Get student contracts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    contractId:
                      type: string
                    project:
                      type: object
                      properties:
                        projectId:
                          type: string
                        title:
                          type: string
                    startDate:
                      type: string
                      format: date
                    endDate:
                      type: string
                      format: date
                    status:
                      type: string
      description: Get student contracts
      operationId: getStudentContracts
      tags:
        - contracts
      parameters: []
    post:
      summary: Create student contract
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  contractId:
                    type: string
      requestBody:
        description: Contract
        content:
          application/json:
            schema:
              type: object
              properties:
                project:
                  type: object
                  properties:
                    projectId:
                      type: string
                student:
                  type: object
                  properties:
                    user:
                      type: object
                      properties:
                        username:
                          type: string
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                # $ref: '#/components/schemas/Contract'
      description: Create student contract
      operationId: createStudentContract
      tags:
        - contracts
  
  '/contracts/{contractId}':
    parameters:
      - name: contractId
        in: path
        required: true
        schema:
          type: string
    patch:
      summary: Update student contract
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                status:
                  type: string
                # $ref: '#/components/schemas/Contract'
        description: Contract
      description: Update student contract
      operationId: updateStudentContract
      tags:
        - contracts

components:
  schemas:
    User:
      title: User
      type: object
      description: User (parent of student/npo client)
      properties:
        userId:
          type: integer
        username:
          type: string
        password:
          type: string
          format: password
        userType:
          type: string
        provider:
          type: string
      required:
        - username
    StudentProfile:
      title: Student Profile
      type: object
      description: Student profile
      properties:
        studentId:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dob:
          type: string
          format: date
        school:
          type: string
        standing:
          type: string
        major1:
          type: string
        major2:
          type: string
        location:
          $ref: '#/components/schemas/Location'
    Student:
      title: Student
      type: object
      description: Student wrapper
      properties:
        profile:
          $ref: '#/components/schemas/StudentProfile'
        skills:
          type: array
          items:
            type: string
    ProjectDetails:
      title: Project Details
      type: object
      description: Project details
      properties:
        projectId:
          type: integer
        owner:
          $ref: '#/components/schemas/StudentProfile'
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
    Project:
      title: Project
      type: object
      description: Project wrapper
      properties:
        details:
          $ref: '#/components/schemas/ProjectDetails'
        fields:
          type: array
          items:
            type: string
        skills:
          type: array
          items:
            type: string
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
    Location:
      title: Location
      type: object
      description: Location
      properties:
        city:
          type: string
        state:
          type: string
        country:
          type: string
      required:
        - city
        - country
    Contract:
      title: Contract
      type: object
      description: Contract between student and NPO client for a project
      properties:
        contractId:
          type: integer
        project:
          $ref: '#/components/schemas/ProjectDetails'
        student:
          $ref: '#/components/schemas/StudentProfile'
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - Pending
            - Active
            - Completed
            - Halted
            - Deleted
